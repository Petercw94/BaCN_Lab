for(i in 0:5) {
xcoords[i+1] = r*cos(i*angbtwn)
ycoords[i+1] = r*sin(i*angbtwn)
}
View(my_colors)
my_colors %>%
filter(B1 < 205)
purp2 = my_colors %>%
filter(B1 < 205)
blue2 = my_colors %>%
filter(B1 > 204)
purp2$Outer.Color = "Purple"
blue2$Outer.Color = "Blue"
full_join(purp2, blue2)
B1 = full_join(purp2, blue2)
purp2 = my_colors %>%
filter(B6 < 205)
blue2 = my_colors %>%
filter(B6 > 204)
purp2$Outer.Color = "Purple"
blue2$Outer.Color = "Blue"
B6 = full_join(purp2, blue2)
identical(B1, B6)
which(B1$Outer.Color != B6$Outer.Color)
non.identical = which(B1$Outer.Color != B6$Outer.Color)
# Join the outer.stim data set and the my_colors data frame
my_colors = full_join(my_colors, outer.stim)
purp1 = my_colors %>%
filter(B1 < 205)
blue1 = my_colors %>%
filter(B1 > 204)
purp1$Outer.Color = "Purple"
blue1$Outer.Color = "Blue"
B1 = full_join(purp2, blue2)
purp6 = my_colors %>%
filter(B6 < 205)
blue6 = my_colors %>%
filter(B6 > 204)
purp6$Outer.Color = "Purple"
blue6$Outer.Color = "Blue"
B6 = full_join(purp2, blue2)
identical(B1, B6)
purp1 = my_colors %>%
filter(B1 < 205)
blue1 = my_colors %>%
filter(B1 > 204)
purp1$Outer.Color = "Purple"
blue1$Outer.Color = "Blue"
B1 = full_join(purp1, blue1)
purp6 = my_colors %>%
filter(B6 < 205)
blue6 = my_colors %>%
filter(B6 > 204)
purp6$Outer.Color = "Purple"
blue6$Outer.Color = "Blue"
B6 = full_join(purp6, blue6)
identical(B1, B6)
non.identical = which(B1$Outer.Color != B6$Outer.Color)
my_colors = B1
my_colors$Outer.Color[non.identical]
my_colors$Outer.Color[non.identical] = "Mixed"
levels(my_colors$Outer.Color)
unique(my_colors$Outer.Color)
identical(B1, B6)
rep("Purple", 3), "Mixed", rep("Blue"), 3)
rep("Purple", 3), "Mixed", rep("Blue", 3)
rep("Purple", 3)
rep("Blue", 3)
low.v.blue.val$Outer.Color = c(rep("Purple", 3), "Mixed", rep("Blue", 3))
mid.v.blue.val$Outer.Color = c(rep("Purple", 2), "Mixed", rep("Blue", 2))
high.v.blue.val$Outer.Color = c(rep("Mixed", 3))
df = full_join(low.v.blue.val, mid.v.blue.val)
outer.stim = full_join(df, high.v.blue.val)
# Join the outer.stim data set and the my_colors data frame
my_colors = full_join(my_colors, outer.stim)
View(my_colors)
unique(my_colors)
unique(my_colors$Outer.Color)
mid.v.blue.val
df = full_join(low.v.blue.val, mid.v.blue.val)
left_join(low.v.blue.val, mid.v.blue.val)
full_join(low.v.blue.val, mid.v.blue.val)
df = full_join(low.v.blue.val, mid.v.blue.val)
full_join(df, high.v.blue.val)
# Join the outer.stim data set and the my_colors data frame
my_colors = full_join(my_colors, outer.stim)
my_colors
high.v.blue.val$Outer.Color = c(rep("Mixed", 3))
df = full_join(low.v.blue.val, mid.v.blue.val)
outer.stim = full_join(df, high.v.blue.val)
# Join the outer.stim data set and the my_colors data frame
my_colors = full_join(my_colors, outer.stim)
View(high.v.blue.val)
View(outer.stim)
# Join the outer.stim data set and the my_colors data frame
my_colors = full_join(my_colors, outer.stim)
# make the my_colors data frame for fixation stimuli
v = 1:20 * 5
v = c(1,v)
v = rep(v, 30)
# make the my_colors data frame for fixation stimuli
v = 1:20 * 5
v = c(1,v)
v = rep(v, 30)
df = data.frame(Red = v, Green = 0)
df = mutate(df, Blue = 255 - df$Red)
purp = df %>%
filter(Red > 50)
purp$Target.Color = "Purple"
blue = df %>%
filter(Red < 51)
blue$Target.Color = "Blue"
my_colors = rbind(purp, blue)
write.csv("my_colors.csv")
var = c(
rep(c("Low.1", "Low.2", "Low.3", "Low.4", "Low.5", "Low.6", "Low.7"), 2),
rep(c("Mid.1", "Mid.2", "Mid.3", "Mid.4", "Mid.5"), 2),
rep(c("High.1", "High.2", "High.3"), 2)
)
var = rep(var, 21)
my_colors$Condition = var
# determine coordinates to set ranges for low variability ####
k = c()
for(i in 0:7) {
k = c(k,i*(99/7) + 155)
}
k
k = round(k, 0)
k[1:7]
# determine the ranges of blue values for the low variability
low.v.blue.val = data.frame(Min = k[1:7], Max = k[2:8])
low.v.blue.val = mutate(low.v.blue.val, int.range = (Max - Min)/6)
# make min and max columns one and two
colnames(low.v.blue.val)[1] = "B1"
colnames(low.v.blue.val)[2] = "B6"
# add in outer stimuli columns
low.v.blue.val$B2 = low.v.blue.val$B1 + low.v.blue.val$int.range
low.v.blue.val$B3 = low.v.blue.val$B2 + low.v.blue.val$int.range
low.v.blue.val$B4 = low.v.blue.val$B3 + low.v.blue.val$int.range
low.v.blue.val$B5 = low.v.blue.val$B4 + low.v.blue.val$int.range
# re-order the data set
low.v.blue.val = low.v.blue.val[,-3]
low.v.blue.val = low.v.blue.val[c(1,3:6,2)]
colnames(low.v.blue.val)
# round the values
low.v.blue.val = round(low.v.blue.val, 0)
low.v.blue.val$Condition = c("Low.1", "Low.2", "Low.3", "Low.4", "Low.5", "Low.6", "Low.7")
low.v.blue.val$Outer.Color = c(rep("Purple", 3), "Mixed", rep("Blue", 3))
# same thing with mid ####
m = c()
for(i in 0:5) {
m = c(m,i*(99/5) + 155)
}
m
m = round(m, 0)
# determine the ranges of blue values for the low variability
mid.v.blue.val = data.frame(Min = m[1:5], Max = m[2:6])
mid.v.blue.val = mutate(mid.v.blue.val, int.range = (Max - Min)/6)
# make Min -> B1
colnames(mid.v.blue.val)[1] = "B1"
# add in outer stimuli columns
mid.v.blue.val$B2 = mid.v.blue.val$B1 + mid.v.blue.val$int.range
mid.v.blue.val$B3 = mid.v.blue.val$B2 + mid.v.blue.val$int.range
mid.v.blue.val$B4 = mid.v.blue.val$B3 + mid.v.blue.val$int.range
mid.v.blue.val$B5 = mid.v.blue.val$B4 + mid.v.blue.val$int.range
# make min and max columns one and two
colnames(mid.v.blue.val)[2] = "B6"
# re-order the data set
mid.v.blue.val = mid.v.blue.val[,-3]
mid.v.blue.val = mid.v.blue.val[c(1,3:6,2)]
colnames(mid.v.blue.val)
mid.v.blue.val = round(mid.v.blue.val, 0)
mid.v.blue.val$Condition = c("Mid.1", "Mid.2", "Mid.3", "Mid.4", "Mid.5")
mid.v.blue.val$Outer.Color = c(rep("Purple", 2), "Mixed", rep("Blue", 2))
# set high variability blue values ####
B1min = 155
B1max = 155 + .5*99
B2min = 155 + .25*99
B2max = 155 + .75*99
B3min = 155 + .5*99
B3max = 254
high.v.blue.val = data.frame(B1 = c(B1min, B2min, B3min), B6 = c(B1max, B2max, B3max))
high.v.blue.val = mutate(high.v.blue.val, int.range = (B6 - B1)/6)
# add in outer stimuli columns
high.v.blue.val$B2 = high.v.blue.val$B1 + high.v.blue.val$int.range
high.v.blue.val$B3 = high.v.blue.val$B2 + high.v.blue.val$int.range
high.v.blue.val$B4 = high.v.blue.val$B3 + high.v.blue.val$int.range
high.v.blue.val$B5 = high.v.blue.val$B4 + high.v.blue.val$int.range
# re-order the data set
high.v.blue.val = high.v.blue.val[,-3]
high.v.blue.val = high.v.blue.val[c(1,3:6,2)]
colnames(high.v.blue.val)
high.v.blue.val = round(high.v.blue.val, 0)
high.v.blue.val$Condition = c("High.1", "High.2", "High.3")
high.v.blue.val$Outer.Color = c(rep("Mixed", 3))
df = full_join(low.v.blue.val, mid.v.blue.val)
outer.stim = full_join(df, high.v.blue.val)
# Join the outer.stim data set and the my_colors data frame
my_colors = full_join(my_colors, outer.stim)
View(my_colors)
library(tidyverse)
# Load the NFL data
df = read.csv("top_100_receivers.csv")
glimpse(df)
colnames(df)
library(tidyverse)
# Load the NFL data
df = read.csv("top_100_receivers.csv")
# create a shiny for the data
ui <- fluidPage(
headerPanel("Top 100 players by receptions"),
sidebarPanel(
selectInput(inputId = "rec1",
label = "Pick a receiver",
choices = df$Player),
selectInput(inputId = "rec2",
label = "Pick another receiver",
choices = df$Player)
),
mainPanel(
tableOutput("table")
))
server <- function(input, output) {
output$table = renderTable({
dateFilter <- subset(df, df$Player == input$rec1)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
headerPanel("Top 100 players by receptions"),
sidebarPanel(
selectInput(inputId = "rec1",
label = "Pick a receiver",
choices = df$Player),
selectInput(inputId = "rec2",
label = "Pick another receiver",
choices = df$Player)
),
mainPanel(
tableOutput("table")
))
server <- function(input, output) {
output$table = renderTable({
dateFilter <- subset(df, df$Player == input$rec1)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
library(shiny)
# Load the NFL data
df = read.csv("top_100_receivers.csv")
# create a shiny for the data
ui <- fluidPage(
headerPanel("Top 100 players by receptions"),
sidebarPanel(
selectInput(inputId = "rec1",
label = "Pick a receiver",
choices = df$Player),
selectInput(inputId = "rec2",
label = "Pick another receiver",
choices = df$Player)
),
mainPanel(
tableOutput("table")
))
server <- function(input, output) {
output$table = renderTable({
dateFilter <- subset(df, df$Player == input$rec1)
})
}
shinyApp(ui = ui, server = server)
df %>%
arrange(df$Player)
library(tidyverse)
library(shiny)
# Load the NFL data
df = read.csv("top_100_receivers.csv")
df = df %>%
arrange(df$Player)
# create a shiny for the data
ui <- fluidPage(
headerPanel("Top 100 players by receptions"),
sidebarPanel(
selectInput(inputId = "rec1",
label = "Pick a receiver",
choices = df$Player),
selectInput(inputId = "rec2",
label = "Pick another receiver",
choices = df$Player)
),
mainPanel(
tableOutput("table")
))
server <- function(input, output) {
output$table = renderTable({
dateFilter <- subset(df, df$Player == input$rec1)
})
}
shinyApp(ui = ui, server = server)
library(tidyverse)
library(shiny)
# Load the NFL data
df = read.csv("top_100_receivers.csv")
df = df %>%
arrange(df$Player)
# create a shiny for the data
ui <- fluidPage(
headerPanel("Top 100 players by receptions"),
sidebarPanel(
selectInput(inputId = "rec1",
label = "Pick a receiver",
choices = df$Player),
selectInput(inputId = "rec2",
label = "Pick another receiver",
choices = df$Player)
),
mainPanel(
tableOutput("table")
))
server <- function(input, output) {
output$table = renderTable({
dateFilter <- subset(df, df$Player == c(input$rec1, input$rec2)
})
}
shinyApp(ui = ui, server = server)
library(tidyverse)
library(shiny)
# Load the NFL data
df = read.csv("top_100_receivers.csv")
df = df %>%
arrange(df$Player)
# create a shiny for the data
ui <- fluidPage(
headerPanel("Top 100 players by receptions"),
sidebarPanel(
selectInput(inputId = "rec1",
label = "Pick a receiver",
choices = df$Player),
selectInput(inputId = "rec2",
label = "Pick another receiver",
choices = df$Player)
),
mainPanel(
tableOutput("table")
))
server <- function(input, output) {
output$table = renderTable({
dateFilter <- subset(df, df$Player == c(input$rec1, input$rec2)
})
}
shinyApp(ui = ui, server = server)
Jan = overflow::sorandf()
Feb = overflow::sorandf()
Mar = overflow::sorandf()
Apr = overflow::sorandf()
May = overflow::sorandf()
Jun = overflow::sorandf()
Jul = overflow::sorandf()
Aug = overflow::sorandf()
Sep = overflow::sorandf()
Oct = overflow::sorandf()
Nov = overflow::sorandf()
Dec = overflow::sorandf()
Q1 = overflow::sorandf()
Q2 = overflow::sorandf()
Q3 = overflow::sorandf()
Q4 = overflow::sorandf()
library(tidyverse)
library(shiny)
# Load the NFL data
df = read.csv("top_100_receivers.csv")
df = df %>%
arrange(df$Player)
# create a shiny for the data
ui <- fluidPage(
headerPanel("Top 100 players by receptions"),
sidebarPanel(
selectInput(inputId = "rec1",
label = "Pick a receiver",
choices = df$Player),
selectInput(inputId = "rec2",
label = "Pick another receiver",
choices = df$Player)
),
mainPanel(
tableOutput("table")
))
server <- function(input, output) {
output$table = renderDataTable({
dateFilter <- subset(df, df$Player == c(input$rec1, input$rec2)
})
}
shinyApp(ui = ui, server = server)
library(tidyverse)
library(shiny)
# Load the NFL data
df = read.csv("top_100_receivers.csv")
df = df %>%
arrange(df$Player)
# create a shiny for the data
ui <- fluidPage(
headerPanel("Top 100 players by receptions"),
sidebarPanel(
selectInput(inputId = "rec1",
label = "Pick a receiver",
choices = df$Player),
selectInput(inputId = "rec2",
label = "Pick another receiver",
choices = df$Player)
),
mainPanel(
tableOutput("table")
))
server <- function(input, output) {
output$table = renderDataTable({
dataFilter <- df[c(input$rec1, inpout$rec2), ]
})
}
shinyApp(ui = ui, server = server)
library(tidyverse)
library(shiny)
# Load the NFL data
df = read.csv("top_100_receivers.csv")
df = df %>%
arrange(df$Player)
# create a shiny for the data
ui <- fluidPage(
headerPanel("Top 100 players by receptions"),
sidebarPanel(
selectInput(inputId = "rec1",
label = "Pick a receiver",
choices = df$Player),
selectInput(inputId = "rec2",
label = "Pick another receiver",
choices = df$Player)
),
mainPanel(
tableOutput("table")
))
server <- function(input, output) {
output$table = renderDataTable({
dataFilter <- df[c(input$rec1, input$rec2), ]
})
}
shinyApp(ui = ui, server = server)
library(tidyverse)
library(shiny)
# Load the NFL data
df = read.csv("top_100_receivers.csv")
df = df %>%
arrange(df$Player)
# create a shiny for the data
ui <- fluidPage(
headerPanel("Top 100 players by receptions"),
sidebarPanel(
selectInput(inputId = "rec1",
label = "Pick a receiver",
choices = df$Player),
selectInput(inputId = "rec2",
label = "Pick another receiver",
choices = df$Player)
),
mainPanel(
tableOutput("table")
))
server <- function(input, output) {
output$table = renderTable({
dataFilter <- df[c(input$rec1, input$rec2), ]
})
}
shinyApp(ui = ui, server = server)
library(tidyverse)
library(shiny)
# Load the NFL data
df = read.csv("top_100_receivers.csv")
df = df %>%
arrange(df$Player)
# create a shiny for the data
ui <- fluidPage(
headerPanel("Top 100 players by receptions"),
sidebarPanel(
textInput(inputId = "rec1",
label = "Pick a receiver"),
selectInput(inputId = "rec2",
label = "Pick another receiver",
choices = df$Player)
),
mainPanel(
tableOutput("table")
))
server <- function(input, output) {
output$table = renderDataTable({
dataFilter <- subset(df, df$Player == input$rec1
})
}
shinyApp(ui = ui, server = server)
library(tidyverse)
data("population")
df = population
ggplot(df, aes(x = country, y = population)) +
geom_point() + facet_wrap(~year)
View(population)
unique(df$country)
which(df$country == "Afghanistan")
af = df[which(df$country == "Afghanistan"), ]
af
ggplot(af, aes(year, population)) +
geom_point()
ggplot(df, aes(year, population)) +
geom_point() + facet_wrap(~country)
unique(df$country)
